General:
	File organization looks good. The README provides good information about the project although a better description of the goals and approaches to goal for each language. File organization is good, just remember to merge branches together and keep the java scripts in a folder separate from the python scripts to maintain organization.
Java:
	OOP principles are well practiced. The functions are clear and good, and there are sufficient comments although some more would help. A recommendation I would suggest however is to have a loop in TicTacToe.java file line 54 so that if an invalid input is entered when selecting AI difficulty, then the error message will display but the user would be asked to enter a choice again. This could be done as such:
Boolean check = False;
do{
	System.out.println("\nChoose game difficulty: \n1. Easy \n2. Hard");
        int choice = s.nextInt();
        switch(choice){
            case 1:
            // sets game difficulty to Easy (random AI logic)
	check = True;
            return gameDifficulty.EASY;
            case 2:
            // sets game difficulty to Hard (Minimax algorithm)
            return gameDifficulty.HARD;
	check = True;

            default: System.out.println("Input entered is invalid. Enter a valid option ( 1 or 2)");
            break;
while (!check)
Other than these recommendations the structure looks good and does not need major fixes.
Python:
	Similarly, the Python version of this program is well written and it utilizes functional programming well. The only recommendation I have would be to have the MiniMax algorithm’s first move be randomized since as it currently is, the AI always goes first and always places his token in the 1st cell. This can make gameplay repetitive, so having the option to either have the player go first or having MiniMax’s first move being in a random cell. A simple change in the bestMove() function in case the current move is the first move being played in the game. Such change can look like this:
def bestMove(brd , 1stMove):
	if ( 1stMove ):
		bestLoc = int((random.random()*8)+1)
		1stMove = False
#rest of function as is already continues here
This alteration to the bestMove() function takes a boolean variable 1stMove and checks that to see if the move should be the random move on turn 1 or not. The Boolean variable cannot be initialized in this same function as that would reset its value back to True each time the function is called so each turn would be treated as the first turn which is incorrect.
Overall the programs works and is good.
